// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */


/*
 * ALU
 *  IN  ->  x[16], y[16], zx, nx, zy, ny, f, no
 *  OUT ->  out[16], zr, ng
 *
 * PC
 *  IN  ->  in[16], load, inc, reset
 *  OUT ->  out[16]
 *
 * Register
 *  IN  ->  in[16], load
 *  OUT ->  out[16]
 *
 * Mux
 *  IN  ->  a, b, sel
 *  OUT ->  out
 */


CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    /*
     * Magic instruction decoding
     */
    
    // A-> 0xxx xxxx xxxx xxxx
    // C-> 111a cccc ccdd djjj

    // null 000
    // JGT  001
    // JEQ  010
    // JGE  011
    // JLT  100
    // JNE  101
    // JLE  110
    // JMP  111
    Not(in=zr, out=nzr);
    Not(in=ng, out=nng);
    Not(in=instruction[0], out=ni0);
    Not(in=instruction[1], out=ni1);
    Not(in=instruction[2], out=ni2);

    And5Way(a=ni2, b=ni1, c=instruction[0], d=nzr, e=nng, out=jgt);
    And5Way(a=ni2, b=instruction[1], c=ni0, d=zr, e=true, out=jeq);
    And5Way(a=ni2, b=instruction[1], c=instruction[2], d=true, e=nng, out=jge);
    And5Way(a=instruction[2], b=ni1, c=ni0, d=true, e=ng, out=jlt);
    And5Way(a=instruction[2], b=ni1, c=instruction[0], d=nzr, e=true, out=jne);
    Xor(a=zr, b=ng, out=zrxng);
    And5Way(a=instruction[2], b=instruction[1], c=ni0, d=zrxng, e=true, out=jle);
    And5Way(a=instruction[2], b=instruction[1], c=instruction[0], d=true, e=true, out=jmp);
    
    Or8Way( in[0]=false, 
            in[1]=jgt,
            in[2]=jeq, 
            in[3]=jge, 
            in[4]=jlt,
            in[5]=jne,
            in[6]=jle,
            in[7]=jmp,
            out=cloadPC);
    Not(in=cloadPC, out=nloadPC);
    And(a=cloadPC, b=instruction[15], out=loadPC);

    // IF instruction is C!
    // writeM is d3, instruction[3]
    // loadA is d1, instruction[5]
    // loadD is d2, instruction[4]
    And(a=instruction[15], b=instruction[3], out=writeM);
    Not(in=instruction[15], out=isA);
    Or(a=instruction[5], b=isA, out=loadA);
    And(a=instruction[15], b=instruction[4], out=loadD);
    
    /*
     * Stuff that actually does work
     */
    ALU(x=D, y=AM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], 
                zr=zr, ng=ng, out=outMi);

    Mux16(a=A, b=inM, sel=instruction[12],
                out=AM);

    PC(in=A, load=loadPC, inc=true, reset=reset,
                out[0..14]=pc);
    
    ARegister(in=intoA, load=loadA,
                out=A, out[0..14]=addressM);
    
    DRegister(in=outMi, load=loadD,
                out=D);

    Mux16(a=instruction, b=outMi, sel=instruction[15], 
    
                out=intoA);

    And16(a=outMi, b=true, out=outM);
}

