/**
 * The ALU.  Computes a pre-defined set of functions out = f(x,y)
 * where x and y are two 16-bit inputs. The function f is selected 
 * by a set of 6 control bits denoted zx, nx, zy, ny, f, no.
 * The ALU operation can be described using the following pseudocode:
 *     if zx=1 set x = 0       // 16-bit zero constant
 *     if nx=1 set x = !x      // Bit-wise negation
 *     if zy=1 set y = 0       // 16-bit zero constant
 *     if ny=1 set y = !y      // Bit-wise negation
 *     if f=1  set out = x + y // Integer 2's complement addition
 *     else    set out = x & y // Bit-wise And
 *     if no=1 set out = !out  // Bit-wise negation
 *
 * In addition to computing out, the ALU computes two 1-bit outputs:
 *     if out=0 set zr = 1 else zr = 0 // 16-bit equality comparison
 *     if out<0 set ng = 1 else ng = 0 // 2's complement comparison
 */

CHIP ALU {

    IN  // 16-bit inputs:
        x[16], y[16],
        // Control bits:
        zx, // Zero the x input
        nx, // Negate the x input
        zy, // Zero the y input
        ny, // Negate the y input
        f,  // Function code: 1 for add, 0 for and
        no; // Negate the out output

    OUT // 16-bit output
        out[16],

        // ALU output flags
        zr, // 1 if out=0, 0 otherwise
        ng; // 1 if out<0, 0 otherwise

    PARTS:

    /*
     * Input manipulation
     */

    //choose nx
    Mux16(a=x, b=false, sel=zx, out=ix);
    Not16(in=ix, out=inx);
    

    //choose ny
    Mux16(a=y, b=false, sel=zy, out=iy);
    Not16(in=iy, out=iny);
    
    //zero x?
    Mux16(a=ix, b=inx, sel=nx, out=ux);

    //zero y?
    Mux16(a=iy, b=iny, sel=ny, out=uy);


    /*
     * Calculate and choose according to f
     */

    //do the calculations
    Add16(a=ux, b=uy, out=addxy);
    And16(a=ux, b=uy, out=andxy);
    
    //choose which calculation
    Mux16(a=andxy, b=addxy, sel=f, out=pout);



    //work negated output
    Not16(in=pout, out=npout);

    //choose between negated or normal output
    Mux16(a=pout, b=npout, sel=no, out=outp);


    /*
     * Work on the zr and ng bits
     */

    //figure whether 0
    Or16Way(in=outp, out=nze);
    Not(in=nze, out=zr);


    //bitmask all but the msb and decide if +ve
    And16(a=outp, b[0..14]=false, b[15]=true, out=bmmsb);
    Or16Way(in=bmmsb, out=ng);
    

    //actually output
    And16(a=outp, b=true, out=out);

}
