
class Pac {
    field int x, y, speed, size, areax0, areay0, areax2, areay2;
    constructor Pac new(Area A, int xi, int yi){
        let x = A.getX0() + xi;
        let y = A.getY0() + yi;
        let speed = 5;
        let size = 5;
        let areax0 = A.getX0();
        let areax2 = A.getX2();
        let areay0 = A.getY0();
        let areay2 = A.getY2();
        do draw();
        return this;
    }
    method int getx(){
        return x;
    }
    method int gety(){
        return y;
    }
    method boolean overlap(Ghost other){
        var int h;
        var int diffx, diffy;
        let diffx = Math.abs(other.getx()-x);
        let diffy = Math.abs(other.gety()-y);
        
        if ((diffx < (2*size)) & (diffy < (2*size))){//they're close.
            return true;
        }else{
            return false;
        }
    }
    method void die(){
        do Screen.setColor(false);
        do Screen.drawCircle(x, y , size+8);
        do Sys.wait(100);
        do Screen.setColor(true);
        do Screen.drawCircle(x, y , size+6);
        do Sys.wait(100);
        do Screen.setColor(false);
        do Screen.drawCircle(x, y , size+4);
        do Sys.wait(100);
        do Screen.setColor(true);
        do Screen.drawCircle(x, y , size+2);
        do Sys.wait(100);
        do Screen.setColor(false);
        do Screen.drawCircle(x, y , size);
        return;
    }
    method void draw(){
        do Screen.drawRectangle(x, y , x+3, y+3);
        return;
    }
    method void mvright(){
        do Screen.setColor(false);
        do draw();
        let x=x+speed;
        if(x>(areax2-size)){
            let x=x-(areax2 - areax0);
        }
        do Screen.setColor(true);
        do draw();
        return;
    }
    method void mvleft(){
        do Screen.setColor(false);
        do draw();
        let x=x-speed;
        if(x<areax0){
            let x=areax2 + (2 * (x - areax0));
        }
        do Screen.setColor(true);
        do draw();
        return;
    }
    method void mvup(){
        do Screen.setColor(false);
        do draw();
        let y=y-speed;
        if(y<areay0){
            let y=areay2 + (2 * (y - areay0));
        }
        do Screen.setColor(true);
        do draw();
        return;
    }
    method void mvdown(){
        do Screen.setColor(false);
        do draw();
        let y=y+speed;
        if(y>(areay2-size)){
            let y= y - (areay2 -areay0);
        }
        do Screen.setColor(true);
        do draw();
        return;
    }
}
